{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","showCard","id","fetch","then","response","json","responseJson","setState","user","data","list","card","showList","state","users","className","this","map","index","onClick","_id","key","name","style","width","points","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NAUqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,gBAqBFC,SAAW,SAACC,GACVC,MAAM,+BAAD,OAAgCD,IAClCE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEC,KAAMF,EAAaG,UAEvC,EAAKF,SAAS,CACZG,MAAM,EACNC,MAAM,KA9BS,EAqCnBC,SAAW,WACT,EAAKL,SAAS,CACZI,MAAM,EACND,MAAM,KAtCR,EAAKG,MAAQ,CACXH,MAAM,EACNC,MAAM,EACNG,MAAO,GACPN,KAAM,IANS,E,gEAYE,IAAD,OAClBN,MAAM,oCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEO,MAAOR,EAAaG,Y,+BA4BhC,IAAD,OACP,OACE,yBAAKM,UAAU,aACZC,KAAKH,MAAMH,KACV,yBAAKK,UAAU,cACZC,KAAKH,MAAMC,MAAMG,KAAI,SAACT,EAAMU,GAAP,OACpB,wBACEC,QAAS,kBAAM,EAAKnB,SAASQ,EAAKY,MAAMC,IAAKH,EAC7CH,UAAU,0CAETP,EAAKc,UAIV,KACHN,KAAKH,MAAMF,KACV,yBAAKI,UAAU,OAAOQ,MAAO,CAAEC,MAAO,UACpC,yBAAKT,UAAU,aACb,wBAAIA,UAAU,cAAcC,KAAKH,MAAML,KAAKc,MAC5C,uBAAGP,UAAU,aAAaC,KAAKH,MAAML,KAAKiB,QAC1C,4BAAQN,QAAS,kBAAM,EAAKP,YAAYG,UAAU,mBAAlD,UAKF,U,GAtEqBW,cCEbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9db37543.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\"\n\n/* Initialize all the states inside the constructor: STATES TO STORE DATA are\n1) list: if the state list is true, the list of users component will be displayed.\n2) card: if the state card is true, the single-user card will be displayed.\n3) users: this state stores the list array of users from the backend.\n4) user: this stores a single-user detail from the backend.\n*/\n\nexport default class App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      list: true,\n      card: false,\n      users: [],\n      user: {},\n    };\n  }\n\n  // to store the data of users in the state, the list of users must be fetched\n  // this has to be done before mounting the component: inside componentDidMount()\n  componentDidMount() {\n    fetch(\"http://localhost:3001/users/list\")\n      .then((response) => response.json())\n      .then((responseJson) => {\n        this.setState({ users: responseJson.data });\n      });\n  }\n\n  // handles the view of single-user detail card; it needs to fetch each user\n  // detail with the id and store it in a state named user\n  showCard = (id) => {\n    fetch(`http://localhost:3001/users/${id}`)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        this.setState({ user: responseJson.data });\n      });\n    this.setState({\n      list: false,\n      card: true,\n    });\n  };\n\n  // a 'back' button in card view will call a function named showList(). This makes\n  // card value 'false' and list value 'true' (will show users list view and hide\n  // the single-user card view)\n  showList = () => {\n    this.setState({\n      card: false,\n      list: true,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.list ? (\n          <div className=\"list-group\">\n            {this.state.users.map((user, index) => (\n              <li\n                onClick={() => this.showCard(user._id)} key={index}\n                className=\"list-group-item list-group-item-action\"\n              >\n                {user.name}\n              </li>\n            ))}\n          </div>\n        ) : null}\n        {this.state.card ? (\n          <div className=\"card\" style={{ width: \"10rem\" }}>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{this.state.user.name}</h5>\n              <p className=\"card-text\">{this.state.user.points}</p>\n              <button onClick={() => this.showList()} className=\"btn btn-primary\">\n                Back\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}